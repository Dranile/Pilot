<?php

namespace AppBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use http\Exception\InvalidArgumentException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
    public function findLastArticle($page = 1, $max = 10 ){

        if (!is_numeric($page)) {
            throw new InvalidArgumentException(
                'value of argument $page is incorrect (value : ' . $page . ').'
            );
        }

        if ($page < 1) {
            throw new NotFoundHttpException('Asked page does not exist');
        }

        if (!is_numeric($max)) {
            throw new InvalidArgumentException(
                'Value of $nbMaxParPage is incorrect (value : ' . $max . ').'
            );
        }

        $queryBuilder = $this->createQueryBuilder('a')
            ->orderBy("a.publishedDate","DESC");
        $query = $queryBuilder->getQuery();

        $firstResult = ($page - 1) * $max;
        $query->setFirstResult($firstResult)->setMaxResults($max);
        $paginator = new Paginator($query);

        if ( ($paginator->count() <= $firstResult) && $page != 1) {
            throw new NotFoundHttpException('Asked page does not exist'); // page 404, sauf pour la premiÃ¨re page
        }
        //return $query->getResult();
        return $paginator;
    }

    public function getArticleOfSerie($id){

        $queryBuilder = $this->createQueryBuilder('a')
            ->where('a.serie = ?1')
            ->setParameter(1,$id);


        $query = $queryBuilder->getQuery();

        $result = $query->getResult();

        return $result;

    }

}
